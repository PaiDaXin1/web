import {
    ProFormDatePicker,
    ProFormDateRangePicker,
    ProFormSelect,
    ProFormText,
    QueryFilter,
    ProTable, TableDropdown
} from '@ant-design/pro-components';
import { DownOutlined } from '@ant-design/icons';
import type { ProColumns } from '@ant-design/pro-components';
import { Button, Popconfirm, Space } from 'antd';
import React, { useEffect, useRef, useState } from 'react';
import { request } from 'umi';


const packageUsageRecord: React.FC = () => {

    const parRef = useRef()
    const reportType: any = {
        '01': {
            label: 'ËΩ¶ËæÜÁÖßÁâá',
            value: '01',
        },
        '02': {
            label: 'ËΩ¶ÁâåËßÜÈ¢ë',
            value: '02',
        },
        '03': {
            label: 'ËΩ¶ËæÜ360ÂÖ®ÊôØ',
            value: '03',
        },
        '04': {
            label: 'ÂèëÂä®Êú∫È´ò‰øùÁúüÈü≥È¢ë',
            value: '04',
        },
        '10': {
            label: 'ËΩ¶ËæÜÊ£ÄÊµãÊä•Âëä',
            value: '10',
        },
        '20': {
            label: 'ËΩ¶ËæÜËØÑ‰º∞Êä•Âëä',
            value: '20',
        },
        '30': {
            label: 'ËΩ¶ËæÜÂ∞ΩË∞ÉÊä•Âëä',
            value: '30',
        },
        '40': {
            label: 'ËΩ¶ËæÜÂè∏Ê≥ïÊ£ÄÊµãÊä•Âëä',
            value: '40',
        },
    };

    const columns: any = [
        {
            title: 'ÊúçÂä°ÂêçÁß∞',
            key: 'reportNo',
            dataIndex: 'reportNo',
            width: 80,
            render: (text: any, record: any, index: any, action: any) => {
                console.log("üöÄ ~ file: index.tsx:94 ~ record", record)

                return <div> {record?.reportNo}</div>
            },
        },
        {
            title: 'Ë¥≠‰π∞ÊñπÂºè',
            width: 180,
            dataIndex: 'containers',
            sorter: (a, b) => a.containers - b.containers,
        },
        {
            title: 'Âü∫Á°Ä‰ª∑Ê†º',
            width: 80,
            dataIndex: 'status',
            initialValue: 'all',
            valueEnum: {
                all: { text: 'ÂÖ®ÈÉ®', status: 'Default' },
                close: { text: 'ÂÖ≥Èó≠', status: 'Default' },
                running: { text: 'ËøêË°å‰∏≠', status: 'Processing' },
                online: { text: 'Â∑≤‰∏äÁ∫ø', status: 'Success' },
                error: { text: 'ÂºÇÂ∏∏', status: 'Error' },
            },
        },
        {
            title: 'ÈîÄÂîÆ‰ª∑Ê†º',
            width: 80,
            dataIndex: 'creator',
            valueEnum: {
                all: { text: 'ÂÖ®ÈÉ®' },
                ‰ªòÂ∞èÂ∞è: { text: '‰ªòÂ∞èÂ∞è' },
                Êõ≤‰∏Ω‰∏Ω: { text: 'Êõ≤‰∏Ω‰∏Ω' },
                Êûó‰∏ú‰∏ú: { text: 'Êûó‰∏ú‰∏ú' },
                ÈôàÂ∏ÖÂ∏Ö: { text: 'ÈôàÂ∏ÖÂ∏Ö' },
                ÂÖºÊüêÊüê: { text: 'ÂÖºÊüêÊüê' },
            },
        },
        {
            title: 'ÈîÄÂîÆÊó∂Èó¥',
            width: 180,
            key: 'option',
            valueType: 'option',
            render: (text: any, record: any, index: any, action: any) => {
                return <div>{record?.orderTime}</div>
            }
        },
        {
            title: 'Áä∂ÊÄÅ',
            width: 180,
            key: 'option',
            valueType: 'option',
            render: () => [

            ],
        },
        {
            title: 'Áî®Êà∑',
            width: 180,
            key: 'option',
            valueType: 'option',
            render: () => [

            ],
        },
    ];

    // const access = useAccess();
    const [par, setPar] = useState({})
    const [tabHeight, setTabHeight] = useState(0);
    useEffect(() => {
        const h = document?.getElementById('tabId')?.offsetHeight || 0;
        console.log('ÊâìÂç∞ ~ file: index.tsx ~ line 316 ~ useEffect ~ h', h);
        setTabHeight(h + 200);
    }, []);

    return (
        <>
            <div className={'box_col_100'}>
                <QueryFilter<any>
                    defaultCollapsed={false}
                    onFinish={async (values) => {
                        console.log(values);
                        setPar(values);
                        parRef?.current?.reloadAndRest();
                    }}
                    onReset={() => {
                        setPar({});
                        // @ts-ignore
                        parRef?.current?.reloadAndRest();
                    }}
                >
                    <ProFormText
                        name={'keyword'}
                        label=""
                        style={{ width: '100%', textTransform: 'uppercase' }}
                        placeholder="ËØ∑ËæìÂÖ•Áõ∏ÂÖ≥‰ø°ÊÅØ"
                    />
                </QueryFilter>
                <div id={'tabId'} className={'box_col_100'}>

                    <ProTable<any>
                        columns={columns}
                        scroll={{ y: tabHeight }}
                        search={false}
                        options={{search:true}}
                        actionRef={parRef}
                        request={async (params) => {
                            console.log(params);
                            const res = await GetReportPayorder({ ...params, ...par });

                            return {
                                data: res?.records,
                                // success ËØ∑ËøîÂõû trueÔºå
                                // ‰∏çÁÑ∂ table ‰ºöÂÅúÊ≠¢Ëß£ÊûêÊï∞ÊçÆÔºåÂç≥‰ΩøÊúâÊï∞ÊçÆ
                                success: true,
                                // ‰∏ç‰º†‰ºö‰ΩøÁî® data ÁöÑÈïøÂ∫¶ÔºåÂ¶ÇÊûúÊòØÂàÜÈ°µ‰∏ÄÂÆöË¶Å‰º†
                                total: res?.total,
                            };
                        }}
                        rowKey="key"
                        headerTitle="Â•óÈ§ê‰ΩøÁî®ËÆ∞ÂΩï"
                        tableAlertOptionRender={() => {
                            return (
                                <Space size={16}>
                                    <a>ÊâπÈáèÂà†Èô§</a>
                                    <a>ÂØºÂá∫Êï∞ÊçÆ</a>
                                </Space>
                            );
                        }}
                    />

                </div>
            </div>
        </>
    );
};
export enum MethodEnum {
    GET = 'GET',
    POST = 'POST',
    PATCH = 'PATCH',
    PUT = 'PUT',
    DELETE = 'DELETE',
}

export async function GET<T>(
    url: string,
    params?: { [key: string]: any },
    options?: { [key: string]: any },
) {
    return request<T>(url, {
        method: MethodEnum.GET,
        params,
        ...(options || {}),
    });
}
export async function POST_FORM<T>(
    url: string,
    params?: { [key: string]: any },
    options?: { [key: string]: any },
) {
    return request<T>(url, {
        method: MethodEnum.POST,
        headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' },
        requestType: 'form',
        params: { pageNum: params?.pageNum, pageSize: params?.pageSize },
        data: params,
        ...(options || {}),
    });
}

export async function GetReportPayorder(params: any) {
    console.log("üöÄ ~ file: fpService.ts:201 ~ GetReportPayorder ~ params", params)
    return POST_FORM<any>('https://www.fastmock.site/mock/25598054f29999bfb08a6cb9ba4279c4/shangdiandian/biz/reportPayorder/page', params);
}

export default packageUsageRecord;
